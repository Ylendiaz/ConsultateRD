// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebAPI.Models;

namespace WebAPI.Data
{
    public partial class consultate_rd_dbContext : DbContext
    {
        public consultate_rd_dbContext()
        {
           //this.ChangeTracker.LazyLoadingEnabled = false;
        }

        public consultate_rd_dbContext(DbContextOptions<consultate_rd_dbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CentroMedico> CentroMedico { get; set; }
        public virtual DbSet<CentroMedicoDoctor> CentroMedicoDoctor { get; set; }
        public virtual DbSet<CitasAgendadas> CitasAgendadas { get; set; }
        public virtual DbSet<Dias> Dias { get; set; }
        public virtual DbSet<Especialidades> Especialidades { get; set; }
        public virtual DbSet<EspecialidadesDoctor> EspecialidadesDoctor { get; set; }
        public virtual DbSet<HorariosDoctor> HorariosDoctor { get; set; }
        public virtual DbSet<InfoCredito> InfoCredito { get; set; }
        public virtual DbSet<LoginTbl> LoginTbl { get; set; }
        public virtual DbSet<UsuarioAsistente> UsuarioAsistente { get; set; }
        public virtual DbSet<UsuarioDoctor> UsuarioDoctor { get; set; }
        public virtual DbSet<UsuarioPaciente> UsuarioPaciente { get; set; }

       //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseLazyLoadingProxies().UseSqlServer("DefaultConnection");


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<CentroMedico>(entity =>
            {
                entity.ToTable("centro_medico", "dbo");

                entity.Property(e => e.CentroMedicoId).HasColumnName("centro_medico_id");

                entity.Property(e => e.CentroMedicoEmail)
                    .IsRequired()
                    .HasMaxLength(315)
                    .IsUnicode(false)
                    .HasColumnName("centro_medico_email");

                entity.Property(e => e.CentroMedicoLocal)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("centro_medico_local");

                entity.Property(e => e.CentroMedicoNombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("centro_medico_nombre");

                entity.Property(e => e.CentroMedicoNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("centro_medico_numero")
                    .IsFixedLength();
            });

            modelBuilder.Entity<CentroMedicoDoctor>(entity =>
            {
                entity.ToTable("centro_medico_doctor", "dbo");

                entity.Property(e => e.CentroMedicoDoctorId).HasColumnName("centro_medico_doctor_id");

                entity.Property(e => e.CentroMedicoId).HasColumnName("centro_medico_id");

                entity.Property(e => e.DoctorId).HasColumnName("doctor_id");

                entity.HasOne(d => d.CentroMedico)
                    .WithMany(p => p.CentroMedicoDoctor)
                    .HasForeignKey(d => d.CentroMedicoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__centro_me__centr__19DFD96B");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.CentroMedicoDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__centro_me__docto__1AD3FDA4");
            });

            modelBuilder.Entity<CitasAgendadas>(entity =>
            {
                entity.HasKey(e => e.CitaId)
                    .HasName("PK__citas_ag__5AC1B05BDFA1AFE8");

                entity.ToTable("citas_agendadas", "dbo");

                entity.Property(e => e.CitaId).HasColumnName("cita_id");

                entity.Property(e => e.CentroMedicoId).HasColumnName("centro_medico_id");

                entity.Property(e => e.CitaFecha)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cita_fecha");

                entity.Property(e => e.CitaHoraCierre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cita_hora_cierre");

                entity.Property(e => e.CitasHoraInicio)
                 .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                .HasColumnName("citas_hora_inicio");

                entity.Property(e => e.DoctorId).HasColumnName("doctor_id");

                entity.Property(e => e.EstadoCitas)
                    .HasColumnName("estado_citas")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaCreacionCita)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_creacion_cita")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacionCita)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_modificacion_cita")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PacienteId).HasColumnName("paciente_id");

                entity.HasOne(d => d.CentroMedico)
                    .WithMany(p => p.CitasAgendadas)
                    .HasForeignKey(d => d.CentroMedicoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__citas_age__centr__123EB7A3");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.CitasAgendadas)
                    .HasForeignKey(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__citas_age__docto__14270015");

                entity.HasOne(d => d.Paciente)
                    .WithMany(p => p.CitasAgendadas)
                    .HasForeignKey(d => d.PacienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__citas_age__pacie__1332DBDC");
            });

            modelBuilder.Entity<Dias>(entity =>
            {
                entity.HasKey(e => e.DiaId)
                    .HasName("PK__Dias__7EB7D078CE2105D8");

                entity.ToTable("Dias", "dbo");

                entity.Property(e => e.DiaId).HasColumnName("dia_id");

                entity.Property(e => e.NombreDia)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nombre_dia");
            });

            modelBuilder.Entity<Especialidades>(entity =>
            {
                entity.HasKey(e => e.EspecialidadId)
                    .HasName("PK__especial__A9F2CD71656A405E");

                entity.ToTable("especialidades", "dbo");

                entity.Property(e => e.EspecialidadId).HasColumnName("especialidad_id");

                entity.Property(e => e.NombreEspecialidad)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("nombre_especialidad");
            });

            modelBuilder.Entity<EspecialidadesDoctor>(entity =>
            {
                entity.ToTable("especialidades_doctor", "dbo");

                entity.Property(e => e.EspecialidadesDoctorId).HasColumnName("especialidades_doctor_id");

                entity.Property(e => e.DoctorId).HasColumnName("doctor_id");

                entity.Property(e => e.EspecialidadId).HasColumnName("especialidad_id");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.EspecialidadesDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__especiali__docto__1DB06A4F");

                entity.HasOne(d => d.Especialidad)
                    .WithMany(p => p.EspecialidadesDoctor)
                    .HasForeignKey(d => d.EspecialidadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__especiali__espec__1EA48E88");
            });

            modelBuilder.Entity<HorariosDoctor>(entity =>
            {
                entity.HasKey(e => e.HorarioId)
                    .HasName("PK__horarios__5A3872282A45C026");

                entity.ToTable("horarios_doctor", "dbo");

                entity.Property(e => e.HorarioId).HasColumnName("horario_id");

                entity.Property(e => e.CentroMedicoId).HasColumnName("centro_medico_id");

                entity.Property(e => e.DiaId).HasColumnName("dia_id");

                entity.Property(e => e.DoctorId).HasColumnName("doctor_id");

                entity.Property(e => e.HoraCierre).HasColumnName("hora_cierre");

                entity.Property(e => e.HoraInicio).HasColumnName("hora_inicio");

                entity.HasOne(d => d.Dia)
                    .WithMany(p => p.HorariosDoctor)
                    .HasForeignKey(d => d.DiaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__horarios___dia_i__7D439ABD");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.HorariosDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__horarios___docto__7C4F7684");
            });

            modelBuilder.Entity<InfoCredito>(entity =>
            {
                entity.ToTable("info_credito", "dbo");

                entity.Property(e => e.InfoCreditoId).HasColumnName("info_credito_id");

                entity.Property(e => e.CodigoSeguridadCredito)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("codigo_seguridad_credito")
                    .IsFixedLength();

                entity.Property(e => e.FechaIngresoCredito)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_ingreso_credito")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaVencimientoCredito)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_vencimiento_credito");

                entity.Property(e => e.NombreCredito)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("nombre_credito");

                entity.Property(e => e.NumeroTarjetaCredito)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("numero_tarjeta_credito")
                    .IsFixedLength();
            });

            modelBuilder.Entity<LoginTbl>(entity =>
            {
                entity.HasKey(e => e.LoginId)
                    .HasName("PK__login_tb__C2C971DB37B8DDAE");

                entity.ToTable("login_tbl", "dbo");

                entity.Property(e => e.LoginId).HasColumnName("login_id");

                entity.Property(e => e.CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(315)
                    .IsUnicode(false)
                    .HasColumnName("correo_electronico");

                entity.Property(e => e.EstadoLogin).HasColumnName("estado_login");

                entity.Property(e => e.Rol).HasColumnName("rol");

                entity.Property(e => e.UsuarioContraseña)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("usuario_contraseña");
            });

            modelBuilder.Entity<UsuarioAsistente>(entity =>
            {
                entity.HasKey(e => e.DoctorId)
                    .HasName("PK__usuario___F399356416CD5164");

                entity.ToTable("usuario_asistente", "dbo");

                entity.Property(e => e.DoctorId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("doctor_id");

                entity.Property(e => e.AsistenteContraseña)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("asistente_contraseña");

                entity.Property(e => e.EstadoLoginAsist).HasColumnName("estado_login_asist");

                entity.Property(e => e.NombreAsistente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("nombre_asistente");

                entity.HasOne(d => d.Doctor)
                    .WithOne(p => p.UsuarioAsistente)
                    .HasForeignKey<UsuarioAsistente>(d => d.DoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__usuario_a__docto__17036CC0");
            });

            modelBuilder.Entity<UsuarioDoctor>(entity =>
            {
                entity.HasKey(e => e.DoctorId)
                    .HasName("PK__usuario___F3993564EE4F05CB");

                entity.ToTable("usuario_doctor", "dbo");

                entity.Property(e => e.DoctorId).HasColumnName("doctor_id");

                entity.Property(e => e.ApellidoDoctor)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("apellido_doctor");

                entity.Property(e => e.FechaCreacionDoctor)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_creacion_doctor")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacionDoctor)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_modificacion_doctor")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaNacimientoDoctor)
                    .HasColumnType("date")
                    .HasColumnName("fecha_nacimiento_doctor");

                entity.Property(e => e.ImagenDoctor).HasColumnName("imagen_doctor");

                entity.Property(e => e.InfoCreditoId).HasColumnName("info_credito_id");

                entity.Property(e => e.IntervaloCitas).HasColumnName("intervalo_citas");

                entity.Property(e => e.LoginId).HasColumnName("login_id");

                entity.Property(e => e.NombreDoctor)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("nombre_doctor");

                entity.Property(e => e.SexoDoctor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sexo_doctor")
                    .IsFixedLength();

                entity.Property(e => e.TelefonoDoctor)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("telefono_doctor")
                    .IsFixedLength();

                entity.HasOne(d => d.InfoCredito)
                    .WithMany(p => p.UsuarioDoctor)
                    .HasForeignKey(d => d.InfoCreditoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__usuario_d__info___778AC167");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.UsuarioDoctor)
                    .HasForeignKey(d => d.LoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__usuario_d__login__76969D2E");
            });

            modelBuilder.Entity<UsuarioPaciente>(entity =>
            {
                entity.HasKey(e => e.PacienteId)
                    .HasName("PK__usuario___46FEF656BEF76A0A");

                entity.ToTable("usuario_paciente", "dbo");

                entity.Property(e => e.PacienteId).HasColumnName("paciente_id");

                entity.Property(e => e.ApellidoPaciente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("apellido_paciente");

                entity.Property(e => e.FechaCreacionPaciente)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_creacion_paciente")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacionPaciente)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_modificacion_paciente")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaNacimientoPaciente)
                    .HasColumnType("date")
                    .HasColumnName("fecha_nacimiento_paciente");

                entity.Property(e => e.ImagenPaciente).HasColumnName("imagen_paciente");

                entity.Property(e => e.LoginId).HasColumnName("login_id");

                entity.Property(e => e.NombrePaciente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("nombre_paciente");

                entity.Property(e => e.SexoPaciente)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sexo_paciente")
                    .IsFixedLength();

                entity.Property(e => e.TelefonoPaciente)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("telefono_paciente")
                    .IsFixedLength();

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.UsuarioPaciente)
                    .HasForeignKey(d => d.LoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__usuario_p__login__02084FDA");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}